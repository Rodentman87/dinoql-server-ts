scalar Date string;

/* GUESTs are minimal users with no permissions, USERs can make posts, ADMINs can moderate other users */
enum UserRole {
	GUEST,
	USER,
	ADMIN
}

/* Options for creating a user */
interface CreateUserOptions {
	/* The name the user signs in with */
	username: string;
	
	/* An alternate display name */
	displayName?: string;
	
	/* The email tied to this user */
	email: string;
	
	/* The user's password */
	password: string;
}

/* Represents a user within the application */
resource User {
	#id: integer;
	
	/* The name the user signs in with */
	username: string;
	
	/* The date that this user was created at */
	createdAt: Date;
	
	/* The user's role */
	role: UserRole;
	
	/* An alternate display name */
	displayName?: string;
	
	/* Returns all users whose username begins with the given name */
	static query findByName(
		/* The name you want to search by */
		name: string
	): [User];
	
	/* Creates a new user */
	static action create(
		/* The configuration for the new user */
		options: CreateUserOptions
	): User;
}

/* When authenticated, returns the user associated with the credentials */
static resource Me {
	#id: integer;
	
	/* The name the user signs in with */
	username: string;
	
	/* An alternate display name */
	displayName?: string;
	
	/* The email tied to this account */
	email: string;
	
	/* Begins the process of changing the account's email */
	action changeEmail(newEmail: string): Me;
}